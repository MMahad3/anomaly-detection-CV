# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12iSTcHkCUivGlaP8Ne6PuygKPkk-ddGc
"""

import numpy as np
from sklearn.model_selection import train_test_split
# from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models,Input
from sklearn.metrics import classification_report,confusion_matrix
import matplotlib.pyplot as plt

# Load dataset
data = np.load("./drive/MyDrive/FYP/dataset.npz")

X_train = data['X_train']
X_test = data['X_test']
y_train = data['y_train']
y_test = data['y_test']
class_names = data['class_names']

print(f"Loaded dataset:")
print(f"X_train shape: {X_train.shape}")
print(f"X_test shape: {X_test.shape}")

def plot_sample(X,y,index):
    plt.figure(figsize=(3,2))
    plt.imshow(X[index])
    plt.xlabel(class_names[y[index]])

plot_sample(X_train,y_train,9)

cnn = models.Sequential([
    #cnn
    Input(shape=(64,64,3)),
    layers.Conv2D(filters=32,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    #dense_network
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(14, activation='softmax')
])

cnn.compile(optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy'])

cnn.fit(X_train,y_train,epochs=10)

cnn.evaluate(X_test,y_test)

y_pred= cnn.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]
print("classification_report\n",classification_report(y_test,y_pred_classes))
y_pred_classes[:5]

y_test[:5]

plot_sample(X_test,y_test,4)

class_names[y_pred_classes[4]]